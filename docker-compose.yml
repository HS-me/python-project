version: '3.8'

services:
  # API 서버
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka.cluster.local:9092
      - REDIS_HOST=redis.cluster.local
      - REDIS_PORT=6379
    dns:
      - 172.16.1.19  # VM1의 DNSmasq 서버
    depends_on:
      - kafka
      - redis
    networks:
      - voting-network

  # Kafka 서버
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper.cluster.local:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka.cluster.local:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    dns:
      - 172.16.1.19  # VM1의 DNSmasq 서버
    depends_on:
      - zookeeper
    networks:
      - voting-network

  # Zookeeper 서버
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    dns:
      - 172.16.1.19  # VM1의 DNSmasq 서버
    networks:
      - voting-network

  # Redis 서버
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    dns:
      - 172.16.1.19  # VM1의 DNSmasq 서버
    networks:
      - voting-network

volumes:
  redis-data:
  postgres-data:

networks:
  voting-network:
    driver: bridge 